{"version":3,"sources":["componenets/Formulaire.js","componenets/Message.js","base.js","App.js","componenets/connexion.js","serviceWorker.js","index.js"],"names":["Formulaire","state","message","length","props","connect","createMessage","addMessage","pseudo","setState","handelChange","event","target","value","handelKeyUp","key","handelSubmit","preventDefault","deconnection","this","className","onSubmit","onKeyUp","required","maxLength","onChange","type","onClick","Redirect","push","to","Component","Message","isUser","base","firebase","initializeApp","apiKey","authDomain","databaseURL","Rebase","createClass","database","App","messages","match","params","messagesRef","createRef","clekU","Date","now","Object","keys","slice","forEach","syncState","context","ref","current","scrollTop","scrollHeight","map","timeout","classNames","Connexion","goToChat","handleChange","handleSubmit","texte","placeholder","Boolean","window","location","hostname","Root","BrowserRouter","Switch","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4607133d.chunk.js","sourcesContent":["import React, { Component } from '../../node_modules/react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass Formulaire extends Component {\r\n\r\n    state = {\r\n        message:'',\r\n        length: this.props.length,\r\n        connect: true\r\n    }\r\n\r\n    //\r\n    createMessage = () =>{\r\n        //recupere le props passse au formulaire \r\n        const {addMessage, pseudo, length} = this.props\r\n\r\n        const message = {\r\n            pseudo,\r\n            message: this.state.message \r\n        }\r\n        addMessage(message)\r\n\r\n        //retourne le massage a vide \r\n        this.setState({message:'', length})\r\n    }\r\n\r\n    //change a l ecriture \r\n    handelChange = event =>{\r\n        const message = event.target.value\r\n        const length = this.props.length - message.length\r\n        this.setState({message, length})\r\n    }\r\n\r\n    handelKeyUp = event =>{\r\n        if(event.key === 'Enter'){\r\n            this.createMessage()\r\n        }\r\n    }\r\n\r\n    //appele quand on soumet le formulaire \r\n    handelSubmit = event =>{\r\n        event.preventDefault()\r\n        this.createMessage()\r\n    }\r\n\r\n    deconnection = () =>{\r\n        this.setState({connect:false});\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.connect) {\r\n            return <Redirect push to='/'/>;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <form className='form'\r\n                    onSubmit= {this.handelSubmit}>\r\n                        <textarea \r\n                        value = {this.state.message}\r\n                        onKeyUp ={this.handelKeyUp}\r\n                        required\r\n                        maxLength = {this.props.length}\r\n                        onChange={this.handelChange}/>\r\n                        <div className='info'>\r\n                            {this.state.length}\r\n                        </div>\r\n                        <button type='submit'>\r\n                            Envoyer!\r\n                        </button>\r\n                    </form>\r\n                    <button type='submit' onClick={this.deconnection}>\r\n                        Deconnecter\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Formulaire\r\n","import React from 'react'\r\n\r\nconst Message = ({pseudo, message, isUser}) => {\r\n    //uttilise la difference de User pour affiche les message du bon cote\r\n    if(isUser(pseudo)){\r\n      return (\r\n        <p className='user-message'>\r\n          {message}\r\n        </p>\r\n      )\r\n    }else{\r\n      return (\r\n        <p className='not-user-message'>\r\n          <strong>{pseudo}: <br/></strong>{message}\r\n        </p>\r\n      )\r\n    }\r\n   \r\n}\r\n\r\nexport default Message\r\n","//configuration de fire base \r\nimport Rebase from 're-base'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/database'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBV1iXIlSe3eE1nWu-Ulz7HVPWYgAqQkUA\",\r\n    authDomain: \"chatbox-1-65fbf.firebaseapp.com\",\r\n     databaseURL: \"https://chatbox-1-65fbf.firebaseio.com\",\r\n \r\n})\r\n\r\n//gestion de la base de donne \r\nconst base = Rebase.createClass(firebase.database())\r\n\r\n//initialisation de l app\r\nexport{firebaseApp}\r\n\r\nexport default base ","import React, { Component, createRef } from 'react'\r\n\r\nimport './App.css'\r\nimport './animationas.css' // css speciale pour l annimation \r\n\r\nimport Formulaire from './componenets/Formulaire'\r\nimport Message from './componenets/Message'\r\n\r\n// Firebase\r\nimport base from './base'\r\n//Animations\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\r\n\r\nclass App extends Component {\r\n\r\n  state={\r\n    messages:{},\r\n    pseudo: this.props.match.params.pseudo\r\n  }\r\n\r\n  //manipule le DOM en react \r\n  messagesRef = createRef()\r\n\r\n  /**\r\n   * syncronise la base avec l app \r\n   * context: this la state actule \r\n   * dans le state les messages\r\n   */\r\n  componentDidMount (){\r\n    base.syncState('/',{\r\n      context: this,\r\n      state: 'messages'\r\n    })\r\n  }\r\n\r\n  //se lance a chaque mise ajour du state\r\n  componentDidUpdate (){\r\n    const ref = this.messagesRef.current\r\n    ref.scrollTop = ref.scrollHeight\r\n  }\r\n\r\n  //ajoute un message a chaque appel\r\n  //sera passe en paramaitre pour arrive dans Formulaire\r\n  addMessage = message =>{\r\n    const messages = {...this.state.messages}\r\n    const clekU = 'message'+Date.now()\r\n    messages[clekU] = message\r\n    \r\n    //suprimet le 1er message quand en a 10 msg\r\n    /**\r\n     * recuper les messages par cas cles \r\n     * verifie que il en a moin de 10\r\n     * ceux depasent 10 sont nullifier et \r\n     */\r\n    Object\r\n      .keys(messages)\r\n      .slice(0,-10)\r\n      .forEach(key=>{\r\n        messages[key] = null\r\n      })\r\n\r\n    this.setState({messages})\r\n  }\r\n\r\n  //verifie de le pseudo active et l auteur du message\r\n  isUser = pseudo => pseudo === this.state.pseudo\r\n\r\n  render () {\r\n    const messages = Object\r\n    .keys(this.state.messages)\r\n    .map(key => (\r\n      <CSSTransition\r\n        timeout={200}\r\n        classNames='fade'\r\n        key={key}>\r\n        <Message\r\n        isUser = {this.isUser}\r\n        message = {this.state.messages[key].message}\r\n        pseudo={this.state.messages[key].pseudo}>\r\n\r\n        </Message>\r\n      </CSSTransition>\r\n      \r\n    ))\r\n    return (\r\n      <div className='box'>\r\n        <div>\r\n          <div className='messages' ref = {this.messagesRef}>\r\n            <TransitionGroup className='message'>\r\n              {messages}\r\n            </TransitionGroup>\r\n          </div>\r\n        </div>\r\n        \r\n        <Formulaire\r\n        length={140}\r\n        pseudo={this.state.pseudo}\r\n        addMessage={this.addMessage}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom' //envoi des info entre les pages par le lien\r\n\r\nclass Connexion extends Component {\r\n    state = {\r\n        pseudo: '',\r\n        goToChat: false\r\n    }\r\n\r\n    handleChange = event =>{\r\n        const pseudo = event.target.value\r\n        this.setState({pseudo})\r\n    }\r\n\r\n    //previent de la soumition du formulaire \r\n    handleSubmit = event =>{\r\n        event.preventDefault() //gere seul le changement de page\r\n        this.setState({goToChat: true})\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.goToChat) {\r\n            const texte = '/pseudo/' + this.state.pseudo\r\n            return <Redirect push to={texte }/>\r\n        }\r\n        return (\r\n            <div className='connexionBox'>\r\n                <form className='connexion' onSubmit={this.handleSubmit}>\r\n                    <input \r\n                    value={this.state.pseudo}\r\n                    onChange={this.handleChange}\r\n                    placeholder='pseudo'\r\n                    type=\"text\"\r\n                    required \r\n                    />\r\n                    <button type='submit'>Connexion</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Connexion;\r\n/**\r\n * le principe est de se servire du lient au dessus pour passe de information au reste des page (compenente)\r\n *  import {Redirect} from 'react-router-dom'  aide a le faire  <Redirect to={texte }/> la fontion utilise\r\n *  import {BrowserRouter, Route, Switch} from 'react-router-dom'  permet de capture le super lient \r\n *  <Route exact path='/' component = {Connexion}></Route>  permet d affichier le du \r\n */","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport Notfound from './componenets/Notfound'\r\nimport  Connexion from './componenets/connexion'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\n//utilisation des chemients \r\nconst Root = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path='chatbox-app/' component = {Connexion}></Route>\r\n            <Route exact path='chatbox-app/pseudo/:pseudo' component = {App}></Route>\r\n            <Route component = {Connexion}></Route>\r\n        </Switch>\r\n    </BrowserRouter>\r\n\r\n)\r\nReactDOM.render(<Root />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}